function [eyoung] = cal_young_modulus(igaus,phifunct,eyoung,element,dim,phigp)
% Compute young's modulus, E, for each element. 
% E is defined in terms of the levet set function.
% If phi(x)<0 E=Eref; if phi(x)>0 E=epsi*Eref (usually epsi <<1)
%
dim.ndime=ndime; dim.nnode=nnode; dim.nelem=nnode;
Eref = element.material.young;
epsi = element.material.opt_epsi;
if (element.material.Emeth==1)
    % E se define en cada pto de gauss via phigp(x_kg) 
    eyoung = ones(nelem,1)*Eref;
    outside= (phigp(igaus,:) > 0);
    if any(outside)
        eyoung(outside)= epsi*eyoung(outside);
    end
elseif (element.material.Emeth==2)
    % E se interpona a partir de un E nodal que se define via phi_nodal
    nod_young = ones(npnod,1)*Eref;
    outside = (phifunct > 0);
    if any(outside)
        nod_young(outside)= Eref*epsi;
    end
    [youngp] = interpol(nod_young,element,nnode,nelem,ndime,problembsc);
    eyoung = youngp(igaus,:);
elseif (element.material.Emeth==3)
    dirichlet_data=zeros(nnode,nelem);
    ephi=zeros(nnode,nelem);
    eyoung = ones(nelem,1)*Eref;
    for i=1:nnode
        dirichlet_data(i,:)= element.conectivities(:,i);
        ephi(i,:)= phifunct(dirichlet_data(i,:));
    end
    avgphi = (ephi(1,:)+ephi(2,:)+ephi(3,:))/3;
    outside= (avgphi > 0);
    if any(outside)
        eyoung(outside)= epsi*Eref;
    end
end

end

